function(){

var data = {
"resource": {
  "version":"10",
  
  "macros":[{"function":"__e"},{"function":"__u","vtp_enableMultiQueryKeys":false,"vtp_enableIgnoreEmptyQueryParam":false},{"function":"__v","vtp_dataLayerVersion":2,"vtp_setDefaultValue":false,"vtp_name":"currency"},{"function":"__v","vtp_dataLayerVersion":2,"vtp_setDefaultValue":false,"vtp_name":"value"},{"function":"__v","vtp_dataLayerVersion":2,"vtp_setDefaultValue":false,"vtp_name":"transaction_id"},{"function":"__v","vtp_dataLayerVersion":2,"vtp_setDefaultValue":false,"vtp_name":"items"},{"function":"__v","vtp_dataLayerVersion":2,"vtp_setDefaultValue":false,"vtp_name":"price"},{"function":"__u","vtp_component":"URL","vtp_enableMultiQueryKeys":false,"vtp_enableIgnoreEmptyQueryParam":false},{"function":"__u","vtp_component":"HOST","vtp_enableMultiQueryKeys":false,"vtp_enableIgnoreEmptyQueryParam":false},{"function":"__u","vtp_component":"PATH","vtp_enableMultiQueryKeys":false,"vtp_enableIgnoreEmptyQueryParam":false},{"function":"__f","vtp_component":"URL"},{"function":"__e"},{"function":"__v","vtp_name":"gtm.element","vtp_dataLayerVersion":1},{"function":"__v","vtp_name":"gtm.elementClasses","vtp_dataLayerVersion":1},{"function":"__v","vtp_name":"gtm.elementId","vtp_dataLayerVersion":1},{"function":"__v","vtp_name":"gtm.elementTarget","vtp_dataLayerVersion":1},{"function":"__v","vtp_name":"gtm.elementUrl","vtp_dataLayerVersion":1},{"function":"__aev","vtp_varType":"TEXT"},{"function":"__v","vtp_name":"gtm.element","vtp_dataLayerVersion":1},{"function":"__v","vtp_name":"gtm.elementClasses","vtp_dataLayerVersion":1},{"function":"__v","vtp_name":"gtm.elementId","vtp_dataLayerVersion":1},{"function":"__v","vtp_name":"gtm.elementTarget","vtp_dataLayerVersion":1},{"function":"__v","vtp_name":"gtm.elementUrl","vtp_dataLayerVersion":1},{"function":"__aev","vtp_varType":"TEXT"},{"function":"__v","vtp_name":"gtm.newUrlFragment","vtp_dataLayerVersion":1},{"function":"__v","vtp_name":"gtm.oldUrlFragment","vtp_dataLayerVersion":1},{"function":"__v","vtp_name":"gtm.newHistoryState","vtp_dataLayerVersion":1},{"function":"__v","vtp_name":"gtm.oldHistoryState","vtp_dataLayerVersion":1},{"function":"__v","vtp_name":"gtm.historyChangeSource","vtp_dataLayerVersion":1}],
  "tags":[{"function":"__gclidw","metadata":["map"],"once_per_event":true,"vtp_enableCrossDomain":false,"vtp_enableUrlPassthrough":false,"vtp_enableCookieOverrides":false,"tag_id":6},{"function":"__awct","metadata":["map"],"once_per_load":true,"vtp_enableNewCustomerReporting":false,"vtp_enableConversionLinker":true,"vtp_enableProductReporting":false,"vtp_enableEnhancedConversion":false,"vtp_conversionCookiePrefix":"_gcl","vtp_enableShippingData":false,"vtp_conversionId":"964881629","vtp_conversionLabel":"PofYCIz_xKAZEN3Zi8wD","vtp_rdp":false,"vtp_url":["macro",1],"vtp_enableProductReportingCheckbox":true,"vtp_enableNewCustomerReportingCheckbox":true,"vtp_enableEnhancedConversionsCheckbox":false,"vtp_enableRdpCheckbox":true,"vtp_enableTransportUrl":false,"vtp_enableCustomParams":false,"tag_id":8},{"function":"__awct","metadata":["map"],"once_per_load":true,"vtp_enableNewCustomerReporting":false,"vtp_enableConversionLinker":true,"vtp_enableProductReporting":false,"vtp_enableEnhancedConversion":false,"vtp_conversionCookiePrefix":"_gcl","vtp_enableShippingData":false,"vtp_conversionId":"964881629","vtp_conversionLabel":"aftzCJvut6IZEN3Zi8wD","vtp_rdp":false,"vtp_url":["macro",1],"vtp_enableProductReportingCheckbox":true,"vtp_enableNewCustomerReportingCheckbox":true,"vtp_enableEnhancedConversionsCheckbox":false,"vtp_enableRdpCheckbox":true,"vtp_enableTransportUrl":false,"vtp_enableCustomParams":false,"tag_id":10},{"function":"__googtag","metadata":["map"],"once_per_event":true,"vtp_tagId":"G-1RSJFZJ156","tag_id":11},{"function":"__gaawe","metadata":["map"],"once_per_event":true,"vtp_sendEcommerceData":false,"vtp_enhancedUserId":false,"vtp_eventName":"fastbots_account_creation","vtp_measurementIdOverride":"G-1RSJFZJ156","vtp_enableUserProperties":true,"vtp_enableMoreSettingsOption":true,"vtp_enableEuid":true,"vtp_migratedToV2":true,"vtp_demoV2":false,"tag_id":12},{"function":"__paused","vtp_originalTagType":"gaawe","tag_id":13},{"function":"__gaawe","metadata":["map"],"once_per_event":true,"vtp_sendEcommerceData":false,"vtp_enhancedUserId":false,"vtp_eventSettingsTable":["list",["map","parameter","currency","parameterValue",["macro",2]],["map","parameter","value","parameterValue",["macro",3]],["map","parameter","transaction_id","parameterValue",["macro",4]],["map","parameter","items","parameterValue",["macro",5]]],"vtp_eventName":"purchase","vtp_measurementIdOverride":"G-1RSJFZJ156","vtp_enableUserProperties":true,"vtp_enableMoreSettingsOption":true,"vtp_enableEuid":true,"vtp_migratedToV2":true,"vtp_demoV2":false,"tag_id":14}],
  "predicates":[{"function":"_eq","arg0":["macro",0],"arg1":"gtm.js"},{"function":"_eq","arg0":["macro",0],"arg1":"new_trial"},{"function":"_eq","arg0":["macro",0],"arg1":"purchase"},{"function":"_eq","arg0":["macro",0],"arg1":"gtm.init"}],
  "rules":[[["if",0],["add",0]],[["if",1],["add",1,4]],[["if",2],["add",2,5,6]],[["if",3],["add",3]]]
},
"runtime":[ [50,"__e",[46,"a"],[36,[13,[41,"$0"],[3,"$0",["require","internal.getEventData"]],["$0","event"]]]]
 ,[50,"__googtag",[46,"a"],[50,"l",[46,"u","v"],[66,"w",[2,[15,"b"],"keys",[7,[15,"v"]]],[46,[43,[15,"u"],[15,"w"],[16,[15,"v"],[15,"w"]]]]]],[50,"m",[46],[36,[7,[17,[17,[15,"d"],"SCHEMA"],"EP_SERVER_CONTAINER_URL"],[17,[17,[15,"d"],"SCHEMA"],"EP_TRANSPORT_URL"]]]],[50,"n",[46,"u"],[52,"v",["m"]],[65,"w",[15,"v"],[46,[53,[52,"x",[16,[15,"u"],[15,"w"]]],[22,[15,"x"],[46,[36,[15,"x"]]]]]]],[36,[44]]],[52,"b",["require","Object"]],[52,"c",["require","createArgumentsQueue"]],[52,"d",[15,"__module_gtag"]],[52,"e",["require","internal.gtagConfig"]],[52,"f",["require","getType"]],[52,"g",["require","internal.loadGoogleTag"]],[52,"h",["require","logToConsole"]],[52,"i",["require","makeNumber"]],[52,"j",["require","makeString"]],[52,"k",["require","makeTableMap"]],[52,"o",[30,[17,[15,"a"],"tagId"],""]],[22,[30,[21,["f",[15,"o"]],"string"],[24,[2,[15,"o"],"indexOf",[7,"-"]],0]],[46,["h",[0,"Invalid Measurement ID for the GA4 Configuration tag: ",[15,"o"]]],[2,[15,"a"],"gtmOnFailure",[7]],[36]]],[52,"p",[30,[17,[15,"a"],"configSettingsVariable"],[8]]],[52,"q",[30,["k",[30,[17,[15,"a"],"configSettingsTable"],[7]],"parameter","parameterValue"],[8]]],["l",[15,"p"],[15,"q"]],[52,"r",[30,[17,[15,"a"],"eventSettingsVariable"],[8]]],[52,"s",[30,["k",[30,[17,[15,"a"],"eventSettingsTable"],[7]],"parameter","parameterValue"],[8]]],["l",[15,"r"],[15,"s"]],[52,"t",[15,"p"]],["l",[15,"t"],[15,"r"]],[22,[30,[2,[15,"t"],"hasOwnProperty",[7,[17,[17,[15,"d"],"SCHEMA"],"EP_USER_PROPERTIES"]]],[17,[15,"a"],"userProperties"]],[46,[53,[52,"u",[30,[16,[15,"t"],[17,[17,[15,"d"],"SCHEMA"],"EP_USER_PROPERTIES"]],[8]]],["l",[15,"u"],[30,["k",[30,[17,[15,"a"],"userProperties"],[7]],"name","value"],[8]]],[43,[15,"t"],[17,[17,[15,"d"],"SCHEMA"],"EP_USER_PROPERTIES"],[15,"u"]]]]],[2,[15,"d"],"convertParameters",[7,[15,"t"],[17,[15,"d"],"GOLD_BOOLEAN_FIELDS"],[51,"",[7,"u"],[36,[39,[20,"false",[2,["j",[15,"u"]],"toLowerCase",[7]]],false,[28,[28,[15,"u"]]]]]]]],[2,[15,"d"],"convertParameters",[7,[15,"t"],[17,[15,"d"],"GOLD_NUMERIC_FIELDS"],[51,"",[7,"u"],[36,["i",[15,"u"]]]]]],["g",[15,"o"],[8,"firstPartyUrl",["n",[15,"t"]]]],["e",[15,"o"],[15,"t"],[8,"noTargetGroup",true]],[2,[15,"a"],"gtmOnSuccess",[7]]]
 ,[50,"__paused",[46,"a"],[2,[15,"a"],"gtmOnFailure",[7]]]
 ,[52,"__module_gtag",[13,[41,"$0"],[3,"$0",[51,"",[7],[50,"a",[46],[50,"f",[46,"g","h","i"],[65,"j",[15,"h"],[46,[22,[2,[15,"g"],"hasOwnProperty",[7,[15,"j"]]],[46,[43,[15,"g"],[15,"j"],["i",[16,[15,"g"],[15,"j"]]]]]]]]],[52,"b",["require","Object"]],[52,"c",[2,[15,"b"],"freeze",[7,[8,"EP_FIRST_PARTY_COLLECTION","first_party_collection","EP_SERVER_CONTAINER_URL","server_container_url","EP_TRANSPORT_URL","transport_url","EP_USER_PROPERTIES","user_properties"]]]],[52,"d",[2,[15,"b"],"freeze",[7,[7,"allow_ad_personalization_signals","allow_google_signals","cookie_update","ignore_referrer","update","first_party_collection","send_page_view"]]]],[52,"e",[2,[15,"b"],"freeze",[7,[7,"cookie_expires","event_timeout","session_duration","session_engaged_time","engagement_time_msec"]]]],[36,[8,"SCHEMA",[15,"c"],"GOLD_BOOLEAN_FIELDS",[15,"d"],"GOLD_NUMERIC_FIELDS",[15,"e"],"convertParameters",[15,"f"]]]],[36,["a"]]]],["$0"]]]
 
]
,"entities":{
"__e":{"2":true,"4":true}
,
"__googtag":{"1":10}


}
,"blob":{"1":"10"}
,"permissions":{
"__e":{"read_event_data":{"eventDataAccess":"specific","keyPatterns":["event"]}}
,
"__googtag":{"logging":{"environments":"debug"},"access_globals":{"keys":[{"key":"gtag","read":true,"write":true,"execute":true},{"key":"dataLayer","read":true,"write":true,"execute":false}]},"configure_google_tags":{"allowedTagIds":"any"},"load_google_tags":{"allowedTagIds":"any","allowFirstPartyUrls":true,"allowedFirstPartyUrls":"any"}}
,
"__paused":{}


}import en_core_web_lg # Large SpaCy model for English language
import numpy as np
import re # regular expressions
import spacy # NLU library

from collections import defaultdict
from sklearn.svm import SVC # Support Vector Classification model
output_format = "IN: {input}\nOUT: {output}\n" + "_"*50
Version 1: Use exact matches
# hard-coded exact questions
responses_exact = {
    "What is the room type of do you want?": "Double bed",
    "What time will you check-in?": "At 6 pm",
    "default": "Have a nice day!"
}

def respond_exact(text):
    response = responses_exact.get(text.lower(), responses_exact['default'])
    return(output_format.format(input=text, output=response))
print(respond_exact("Where can I find hotel?"))
print("_"*50)
print(respond_exact("How can I go to hotel?"))
print("_"*50)
print(respond_exact("Good bye!"))
Version 2: Pattern Matching
# Define keywords that can help determine the intent 
intent_keywords = {
    'roomtype': ['room', 'type', 'type of room', 'bed'],
    'checkin': ['time', 'when', 'get here', 'checkin', 'hour']
}
# Create a dictionary of patterns
patterns = {intent: re.compile('|'.join(keys)) for intent, keys in intent_keywords.items()}

# Define a function to find the intent of a message
def get_intent_re(message):
    for intent, pattern in patterns.items():
        # Check if the pattern occurs in the message 
        if pattern.search(message):
            return(intent)
    else:
        return('default')

responses_re = {
    "roomtype":"Double bed",
    "checkin": "At 6 pm",
    "default":"Good bye!"
}

def respond_re(text):
    response = responses_re.get(get_intent_re(text))
    return(output_format.format(input=text, output=response))
print(respond_re("What is the room type of do you want?"))
print(respond_re("What time will you check-in?"))
print(respond_re("See you"))
Version 3: Machine Learning
Step 3.1: Finding out what he / she wants
# Create training data
training_sentences = [
    "What is the room type of do you want?"
    "Which type would you like to have room?",
    "Which type do you want for your room?",

    "What time will you check-in?
    "When can we expect you to get hotel?",
    "At what hour will you be here?"
    
]
training_intents = [
    "roomtype",
    "roomtype",
    "roomtype",
    "checkin",
    "checkin",
    "checkin",

]
# this may take a couple of seconds
nlp = en_core_web_lg.load()
# Initialize the array with zeros: X
X_train = np.zeros((len(training_sentences), 
              nlp('sentences').vocab.vectors_length))

for i, sentence in enumerate(training_sentences):
    # Pass each each sentence to the nlp object to create a document
    doc = nlp(sentence)
    # Save the document's .vector attribute to the corresponding row in X
    X_train[i, :] = doc.vector
# Create a support vector classifier
clf = SVC(C=1, gamma="auto", probability=True)

# Fit the classifier using the training data
clf.fit(X_train, training_intents)

#Yes, a lot can be done here to check / improve model performance! We will leave that for another day!
def get_intent_ml(text):
    doc = nlp(text)
    return(clf.predict([doc.vector])[0])
responses_ml = {
    "roomtype":"Double bed",
    "checkin": "At 6 pm",
    "default":"Good bye!"
}

def respond_ml(text):
    response = responses_ml.get(get_intent_ml(text), responses_ml["default"])
    return(output_format.format(input=text, output=response))
print(respond_re("Room type"))
print(respond_re(("checkin")))
"What time will you check-in
# add this to responses dict: "default": "I love you too!"
# in the predict function: if the model is not too sure about the intent, return the string "default"
    # There is a function that gives the probabilities for each of the possible outputs
    # If the maximum probability is low, one might say that the model is not sure about the intent
    # Note! This idea should work, but relies on the functionality of the predict_proba function:
    # for the SVC model, the predict_proba function does not give meaningfull results for small datasets:
    # http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html#sklearn.svm.SVC.predict_proba

def get_intent_ml_2(text):
    """
        Returns the intent from a given text, unless the model is not sure, in which case 'default' is returned
    """
    doc = nlp(text)
    max_proba = max(clf.predict_proba([doc.vector])[0])
    if(max_proba == 0.5):
        return('default')
    else:
        return(clf.predict([doc.vector])[0])

def respond_ml_2(text):
    response = responses_ml.get(get_intent_ml_2(text), responses_ml["default"])
    return(output_format.format(input=text, output=response))
print(respond_ml(  'flowers'))
print(respond_ml_2('flowers'))
def get_all_entities(text):
    """
        Get all entities in a given text, in a text: label_ dictionary
    """
    doc = nlp(text)
    
    d = defaultdict(list)
    for ent in doc.ents:
        d[ent.label_].append(ent.text)
    return(d)
test_ents = get_all_entities('What is the room type of do you want?, or next tuesday or wednesday fish football Bengals')
print(sorted(test_ents.items()))
policy = {
    ("dinner_preference", "time and date"): "I want to eat pasta",
    ("dinner_preference", "time only"): "I want to eat pasta",
    ("dinner_preference", "date only"): "I want to eat pasta",
    ("dinner_preference", "none"): "When?",
    ("arrival_time", "time and date"): "I will be home at six",
    ("arrival_time", "time only"): "I will be home at six",
    ("arrival_time", "date only"): "I will be home at six",
    ("arrival_time", "none"): "When?",
    ("default", "none"): "What do you want?",
}
def respond_ml_3(text):
    """Check for specification of date and time
        If not specified, ask for clarification
    """
    intent = get_intent_ml_2(text)
        
    if intent != 'default':
        entities = get_all_entities(text)
        if 'TIME' in entities and 'DATE' in entities:
            specification = 'time and date'
            time = ' and '.join(entities['DATE']) + ' at ' + ' and '.join(entities['TIME'])
        elif 'TIME' in entities:
            specification = 'time only'
            time = ' and '.join(entities['TIME'])
        elif 'DATE' in entities:
            specification = 'date only'
            time = ' and '.join(entities['DATE'])
        else:
            specification = 'none'
            time = ""
    else:
        specification = 'none'
        time = ""
    
    response = policy.get((intent, specification)) + ' ' + time
    return(output_format.format(input=text, output=response))
preferences {"monday" :"pancakes"}
print(respond_ml_3('what would you like to eat next wednesday thursday and friday?'))



,"security_groups":{
"google":[
"__e"
,
"__googtag"

]


}
