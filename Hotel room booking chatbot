import en_core_web_lg # Large SpaCy model for English language
import numpy as np
import re # regular expressions
import spacy # NLU library

from collections import defaultdict
from sklearn.svm import SVC # Support Vector Classification model
output_format = "IN: {input}\nOUT: {output}\n" + "_"*50
Version 1: Use exact matches
# hard-coded exact questions
responses_exact = {
    "What is the room type of do you want?": "Double bed",
    "What time will you check-in?": "At 6 pm",
    "default": "Have a nice day!"
}

def respond_exact(text):
    response = responses_exact.get(text.lower(), responses_exact['default'])
    return(output_format.format(input=text, output=response))
print(respond_exact("Where can I find hotel?"))
print("_"*50)
print(respond_exact("How can I go to hotel?"))
print("_"*50)
print(respond_exact("Good bye!"))
Version 2: Pattern Matching
# Define keywords that can help determine the intent 
intent_keywords = {
    'roomtype': ['room', 'type', 'type of room', 'bed'],
    'checkin': ['time', 'when', 'get here', 'checkin', 'hour']
}
# Create a dictionary of patterns
patterns = {intent: re.compile('|'.join(keys)) for intent, keys in intent_keywords.items()}

# Define a function to find the intent of a message
def get_intent_re(message):
    for intent, pattern in patterns.items():
        # Check if the pattern occurs in the message 
        if pattern.search(message):
            return(intent)
    else:
        return('default')

responses_re = {
    "roomtype":"Double bed",
    "checkin": "At 6 pm",
    "default":"Good bye!"
}

def respond_re(text):
    response = responses_re.get(get_intent_re(text))
    return(output_format.format(input=text, output=response))
print(respond_re("What is the room type of do you want?"))
print(respond_re("What time will you check-in?"))
print(respond_re("See you"))
Version 3: Machine Learning
Step 3.1: Finding out what he / she wants
# Create training data
training_sentences = [
    "What is the room type of do you want?"
    "Which type would you like to have room?",
    "Which type do you want for your room?",

    "What time will you check-in?
    "When can we expect you to get hotel?",
    "At what hour will you be here?"
    
]
training_intents = [
    "roomtype",
    "roomtype",
    "roomtype",
    "checkin",
    "checkin",
    "checkin",

]
# this may take a couple of seconds
nlp = en_core_web_lg.load()
# Initialize the array with zeros: X
X_train = np.zeros((len(training_sentences), 
              nlp('sentences').vocab.vectors_length))

for i, sentence in enumerate(training_sentences):
    # Pass each each sentence to the nlp object to create a document
    doc = nlp(sentence)
    # Save the document's .vector attribute to the corresponding row in X
    X_train[i, :] = doc.vector
# Create a support vector classifier
clf = SVC(C=1, gamma="auto", probability=True)

# Fit the classifier using the training data
clf.fit(X_train, training_intents)

#Yes, a lot can be done here to check / improve model performance! We will leave that for another day!
def get_intent_ml(text):
    doc = nlp(text)
    return(clf.predict([doc.vector])[0])
responses_ml = {
    "roomtype":"Double bed",
    "checkin": "At 6 pm",
    "default":"Good bye!"
}

def respond_ml(text):
    response = responses_ml.get(get_intent_ml(text), responses_ml["default"])
    return(output_format.format(input=text, output=response))
print(respond_re("Room type"))
print(respond_re(("checkin")))
"What time will you check-in
# add this to responses dict: "default": "I love you too!"
# in the predict function: if the model is not too sure about the intent, return the string "default"
    # There is a function that gives the probabilities for each of the possible outputs
    # If the maximum probability is low, one might say that the model is not sure about the intent
    # Note! This idea should work, but relies on the functionality of the predict_proba function:
    # for the SVC model, the predict_proba function does not give meaningfull results for small datasets:
    # http://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html#sklearn.svm.SVC.predict_proba

def get_intent_ml_2(text):
    """
        Returns the intent from a given text, unless the model is not sure, in which case 'default' is returned
    """
    doc = nlp(text)
    max_proba = max(clf.predict_proba([doc.vector])[0])
    if(max_proba == 0.5):
        return('default')
    else:
        return(clf.predict([doc.vector])[0])

def respond_ml_2(text):
    response = responses_ml.get(get_intent_ml_2(text), responses_ml["default"])
    return(output_format.format(input=text, output=response))
print(respond_ml(  'flowers'))
print(respond_ml_2('flowers'))
def get_all_entities(text):
    """
        Get all entities in a given text, in a text: label_ dictionary
    """
    doc = nlp(text)
    
    d = defaultdict(list)
    for ent in doc.ents:
        d[ent.label_].append(ent.text)
    return(d)
test_ents = get_all_entities('What is the room type of do you want?, or next tuesday or wednesday fish football Bengals')
print(sorted(test_ents.items()))
policy = {
    ("dinner_preference", "time and date"): "I want to eat pasta",
    ("dinner_preference", "time only"): "I want to eat pasta",
    ("dinner_preference", "date only"): "I want to eat pasta",
    ("dinner_preference", "none"): "When?",
    ("arrival_time", "time and date"): "I will be home at six",
    ("arrival_time", "time only"): "I will be home at six",
    ("arrival_time", "date only"): "I will be home at six",
    ("arrival_time", "none"): "When?",
    ("default", "none"): "What do you want?",
}
def respond_ml_3(text):
    """Check for specification of date and time
        If not specified, ask for clarification
    """
    intent = get_intent_ml_2(text)
        
    if intent != 'default':
        entities = get_all_entities(text)
        if 'TIME' in entities and 'DATE' in entities:
            specification = 'time and date'
            time = ' and '.join(entities['DATE']) + ' at ' + ' and '.join(entities['TIME'])
        elif 'TIME' in entities:
            specification = 'time only'
            time = ' and '.join(entities['TIME'])
        elif 'DATE' in entities:
            specification = 'date only'
            time = ' and '.join(entities['DATE'])
        else:
            specification = 'none'
            time = ""
    else:
        specification = 'none'
        time = ""
    
    response = policy.get((intent, specification)) + ' ' + time
    return(output_format.format(input=text, output=response))
preferences {"monday" :"pancakes"}
print(respond_ml_3('what would you like to eat next wednesday thursday and friday?'))



,"security_groups":{
"google":[
"__e"
,
"__googtag"

]


}
